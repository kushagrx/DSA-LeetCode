class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        queue<pair<int, int>> q;
        vector<vector<int>> distance(n, vector<int>(m, -1));

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(mat[i][j] == 0) {
                    q.push({i, j});
                    distance[i][j] = 0; 
                }
            }
        }

        vector<vector<int>> directions = {
            {-1, 0}, {1, 0}, {0, 1}, {0, -1}
        };

        while(!q.empty()) {
            auto [x, y] = q.front();
            q.pop();

            for(auto dir : directions) {
                int newX = x + dir[0];
                int newY = y + dir[1];
                if(newX >= 0 && newX < n && newY >= 0 && newY < m && 
                distance[newX][newY] == -1) {
                    distance[newX][newY] = distance[x][y] + 1;
                    q.push({newX, newY});
                }
            }
        }
        return distance;
    }
};
