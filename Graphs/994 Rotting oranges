class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();         
        int m = grid[0].size();
        int fresh = 0;
        queue<pair<int, int>> q;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.push({i, j});
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }
        if (fresh == 0) return 0;

        int minutes = -1;
        int directions[4][2] = { {0,1}, {1,0}, {0,-1}, {-1,0} };

        while (!q.empty()) {
            int levelSize = q.size();
            minutes++;
            for (int i = 0; i < levelSize; i++) {
                pair<int, int> curr = q.front(); q.pop();
                for (auto dir : directions) {
                    int newX = curr.first + dir[0];
                    int newY = curr.second + dir[1];

                    if (newX >= 0 && newX < n &&
                        newY >= 0 && newY < m &&
                        grid[newX][newY] == 1) {
                        grid[newX][newY] = 2;
                        fresh--;
                        q.push({newX, newY});
                    }
                }
            }
        }
        return (fresh == 0) ? minutes : -1;
    }
};
