class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int n = maze.size();
        int m = maze[0].size();

        queue<pair<int,int>> q;
        q.push({entrance[0], entrance[1]});
        maze[entrance[0]][entrance[1]] = '+';

        int steps = 0;
        int dirs[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};

        while (!q.empty()) {
            int levelsize=q.size();
            steps++;
            for(int i=0;i<levelsize;i++){
                auto [x,y]=q.front();
                q.pop();

                for(auto dir:dirs){
                    int nx=x+ dir[0];
                    int ny=y+ dir[1];
                    if (nx>=0 && nx<n && ny>=0 && ny<m && maze[nx][ny]=='.') {
                        maze[nx][ny] = '+'; 
                        q.push({nx, ny});
                        if (nx == 0 || ny == 0 || nx == n-1 || ny == m-1) {
                            return steps;
                        }
                    }
                }
                
            }
        }
        return -1; 
    }
};
